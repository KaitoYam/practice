[{"C:\\Users\\user\\practice\\metal_slime_app\\src\\index.js":"1","C:\\Users\\user\\practice\\metal_slime_app\\src\\App.js":"2","C:\\Users\\user\\practice\\metal_slime_app\\src\\AuthService.js":"3","C:\\Users\\user\\practice\\metal_slime_app\\src\\LoggedInRoute.js":"4","C:\\Users\\user\\practice\\metal_slime_app\\src\\pages\\SignUp.js":"5","C:\\Users\\user\\practice\\metal_slime_app\\src\\pages\\Room.js":"6","C:\\Users\\user\\practice\\metal_slime_app\\src\\pages\\Login.js":"7","C:\\Users\\user\\practice\\metal_slime_app\\src\\todo\\Todo.js":"8","C:\\Users\\user\\practice\\metal_slime_app\\src\\pages\\album.js":"9","C:\\Users\\user\\practice\\metal_slime_app\\src\\pages\\Recommended.js":"10","C:\\Users\\user\\practice\\metal_slime_app\\src\\profile\\UpDate.js":"11","C:\\Users\\user\\practice\\metal_slime_app\\src\\config\\Firebase.js":"12","C:\\Users\\user\\practice\\metal_slime_app\\src\\todo\\Form.js":"13","C:\\Users\\user\\practice\\metal_slime_app\\src\\Menu\\menu.js":"14"},{"size":160,"mtime":1607422705003,"results":"15","hashOfConfig":"16"},{"size":2623,"mtime":1610587546068,"results":"17","hashOfConfig":"16"},{"size":523,"mtime":1608526916101,"results":"18","hashOfConfig":"16"},{"size":566,"mtime":1608947588807,"results":"19","hashOfConfig":"16"},{"size":2774,"mtime":1608947563818,"results":"20","hashOfConfig":"16"},{"size":4391,"mtime":1610503265242,"results":"21","hashOfConfig":"16"},{"size":2339,"mtime":1610375890254,"results":"22","hashOfConfig":"16"},{"size":2290,"mtime":1610582991109,"results":"23","hashOfConfig":"16"},{"size":2261,"mtime":1610458496923,"results":"24","hashOfConfig":"16"},{"size":6613,"mtime":1610584519073,"results":"25","hashOfConfig":"16"},{"size":2557,"mtime":1610458496939,"results":"26","hashOfConfig":"16"},{"size":627,"mtime":1609044273919,"results":"27","hashOfConfig":"16"},{"size":1096,"mtime":1610458496970,"results":"28","hashOfConfig":"16"},{"size":2911,"mtime":1610459046686,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"hdf9ai",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},"C:\\Users\\user\\practice\\metal_slime_app\\src\\index.js",[],["61","62"],"C:\\Users\\user\\practice\\metal_slime_app\\src\\App.js",[],"C:\\Users\\user\\practice\\metal_slime_app\\src\\AuthService.js",[],"C:\\Users\\user\\practice\\metal_slime_app\\src\\LoggedInRoute.js",[],"C:\\Users\\user\\practice\\metal_slime_app\\src\\pages\\SignUp.js",[],"C:\\Users\\user\\practice\\metal_slime_app\\src\\pages\\Room.js",["63","64"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport firebase from '../config/Firebase'\r\n\r\nimport { AuthContext } from '../AuthService'\r\n\r\nimport './room.css'\r\nimport profile from '../img/profile.img.jpg'\r\nimport { Paper, Avatar } from '@material-ui/core'\r\n\r\nconst Room = () => {\r\n\r\n    const [messages, setMessages] = useState(null)\r\n    const [value, setValue] = useState('')\r\n    const [image, setImage] = useState('')\r\n\r\n    const user = useContext(AuthContext)\r\n    //AuthserviceのReact.createContextからの戻り値で認証ユーザー\r\n\r\n    useEffect(() => {\r\n        firebase.firestore().collection('messages').orderBy('date')\r\n            .onSnapshot((snapshot) => {\r\n                const messages = snapshot.docs.map(doc => {\r\n                    return doc.data()\r\n                })\r\n                //　onsnapshotでmessagesコレクションのデータを取得（docsはランダムデータID） \r\n                setMessages(messages)\r\n            })\r\n        firebase.storage().ref().child(`/images/${user.uid}`).getDownloadURL().then(fireBaseUrl => {\r\n            setImage(fireBaseUrl)\r\n\r\n        })\r\n    }, [])\r\n\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        const textNone = document.getElementById('tuika')\r\n        if (textNone.value === '')\r\n            return;\r\n        else\r\n            textNone.value = ''\r\n        firebase.firestore().collection('messages').doc()\r\n            .set({\r\n                user: user.displayName,\r\n                content: value,\r\n                image: image,\r\n                date: new Date(),\r\n                uid: user.uid //各々のユーザー情報(id)\r\n            })\r\n        setMessages([\r\n            ...messages,\r\n            {\r\n                user: user.displayName,\r\n                image: image,\r\n                content: value,\r\n                date: new Date(),\r\n                uid: user.uid\r\n            }\r\n        ])\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"title_chat\">トーク</h1>\r\n            \r\n            <div className='took'>\r\n                <Paper>\r\n                    {/* ↓今のメッセージの数 */}\r\n                    <div className='room-ul' >\r\n                        {messages\r\n                            ?\r\n                            messages.map((message, id) =>\r\n                            (<React.Fragment key={id} >\r\n                                {message.uid !== user.uid && <div className='messages-left'>\r\n                                    <Avatar>\r\n                                        <div className='icon'>\r\n                                            <img className='icon-img' src={message.image ? message.image : profile} />\r\n                                        </div>\r\n                                    </Avatar>\r\n                                    <div>\r\n                                        <p className='user-name'>{message.user}</p>\r\n                                        <p className='message-left'>{message.content}</p>\r\n                                    </div>\r\n                                </div>}\r\n                                {message.uid === user.uid && <div className='messages-right'>\r\n                                    <div>\r\n                                        {/* <p>{message.user}</p> */}\r\n                                        <p className='message-right'>{message.content}</p>\r\n                                    </div>\r\n                                </div>}\r\n                            </React.Fragment>)\r\n                            ) :\r\n                            <p>...loading</p>\r\n                        }\r\n                    </div>\r\n                </Paper>\r\n                {/* ↓自分でメッセージをつくりだす */}\r\n                <form onSubmit={handleSubmit} className='took-form'>\r\n                    <div className='took-form2'>\r\n                        <input\r\n                            type='text'\r\n                            id='tuika'\r\n                            placeholder='メッセージを入力'\r\n                            onChange={e => setValue(e.target.value)}\r\n                        />\r\n                        <div type='submit' className='took-button'></div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Room","C:\\Users\\user\\practice\\metal_slime_app\\src\\pages\\Login.js",[],"C:\\Users\\user\\practice\\metal_slime_app\\src\\todo\\Todo.js",[],"C:\\Users\\user\\practice\\metal_slime_app\\src\\pages\\album.js",[],"C:\\Users\\user\\practice\\metal_slime_app\\src\\pages\\Recommended.js",["65"],"C:\\Users\\user\\practice\\metal_slime_app\\src\\profile\\UpDate.js",[],"C:\\Users\\user\\practice\\metal_slime_app\\src\\config\\Firebase.js",[],"C:\\Users\\user\\practice\\metal_slime_app\\src\\todo\\Form.js",[],"C:\\Users\\user\\practice\\metal_slime_app\\src\\Menu\\menu.js",["66"],"import React, { useState, useContext } from 'react'\r\nimport {\r\n    IconButton,\r\n    makeStyles,\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n    Drawer,\r\n    Link,\r\n    Divider\r\n} from '@material-ui/core'\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\n\r\nimport { AuthContext } from '../AuthService'\r\n\r\nconst UseStyles = makeStyles({\r\n    list: {\r\n        width: 250,\r\n    }\r\n});\r\n\r\nconst Menu = () => {\r\n    const classes = UseStyles();\r\n    const [state, setState] = useState(false)\r\n\r\n    const user = useContext(AuthContext)\r\n\r\n    return (\r\n        <>\r\n            {\r\n                user === user &&\r\n                <>\r\n                    <IconButton\r\n                        style={{ color: \"#ffb74d\" }}\r\n                        aria-label='menu'\r\n                        onClick={() => { setState(true) }}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Drawer open={state} onClose={() => { setState(false) }} anchor=\"left\">\r\n                        <div className={classes.list}>\r\n                            <List>\r\n                                <Link href=\"/update\">\r\n                                    <ListItem button>\r\n                                        <ListItemText primary='プロフィール' />\r\n                                    </ListItem>\r\n                                </Link>\r\n                                <Divider />\r\n                                <Link href=\"/Room\">\r\n                                    <ListItem button>\r\n                                        <ListItemText primary='トーク' />\r\n                                    </ListItem>\r\n                                </Link>\r\n                                <Divider />\r\n                                <Link href=\"/todo\">\r\n                                    <ListItem button>\r\n                                        <ListItemText primary='Todo' />\r\n                                    </ListItem>\r\n                                </Link>\r\n                                <Divider />\r\n                                <Link href=\"/Recommended\">\r\n                                    <ListItem button>\r\n                                        <ListItemText primary='おすすめ' />\r\n                                    </ListItem>\r\n                                </Link>\r\n                                <Divider />\r\n                                <Link href=\"/album\">\r\n                                    <ListItem button>\r\n                                        <ListItemText primary='卒業アルバム' />\r\n                                    </ListItem>\r\n                                </Link>\r\n                                <Divider />\r\n                            </List>\r\n                        </div>\r\n                    </Drawer>\r\n                </>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Menu",{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":32,"column":8,"nodeType":"73","endLine":32,"endColumn":10,"suggestions":"74"},{"ruleId":"75","severity":1,"message":"76","line":78,"column":45,"nodeType":"77","endLine":78,"endColumn":119},{"ruleId":"78","severity":1,"message":"79","line":81,"column":25,"nodeType":"77","endLine":81,"endColumn":235},{"ruleId":"80","severity":1,"message":"81","line":31,"column":17,"nodeType":"82","messageId":"83","endLine":31,"endColumn":30},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user.uid'. Either include it or remove the dependency array.","ArrayExpression",["86"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","no-self-compare","Comparing to itself is potentially pointless.","BinaryExpression","comparingToSelf","no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},"Update the dependencies array to be: [user.uid]",{"range":"89","text":"90"},[1075,1077],"[user.uid]"]