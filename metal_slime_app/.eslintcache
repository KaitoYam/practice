[{"C:\\Users\\user\\practice\\metal_slime_app\\src\\index.js":"1","C:\\Users\\user\\practice\\metal_slime_app\\src\\App.js":"2","C:\\Users\\user\\practice\\metal_slime_app\\src\\AuthService.js":"3","C:\\Users\\user\\practice\\metal_slime_app\\src\\LoggedInRoute.js":"4","C:\\Users\\user\\practice\\metal_slime_app\\src\\pages\\SignUp.js":"5","C:\\Users\\user\\practice\\metal_slime_app\\src\\pages\\Room.js":"6","C:\\Users\\user\\practice\\metal_slime_app\\src\\pages\\Login.js":"7","C:\\Users\\user\\practice\\metal_slime_app\\src\\todo\\Todo.js":"8","C:\\Users\\user\\practice\\metal_slime_app\\src\\pages\\album.js":"9","C:\\Users\\user\\practice\\metal_slime_app\\src\\pages\\Recommended.js":"10","C:\\Users\\user\\practice\\metal_slime_app\\src\\profile\\UpDate.js":"11","C:\\Users\\user\\practice\\metal_slime_app\\src\\config\\Firebase.js":"12","C:\\Users\\user\\practice\\metal_slime_app\\src\\todo\\Form.js":"13","C:\\Users\\user\\practice\\metal_slime_app\\src\\Menu\\menu.js":"14"},{"size":160,"mtime":1607422705003,"results":"15","hashOfConfig":"16"},{"size":2405,"mtime":1610458496859,"results":"17","hashOfConfig":"16"},{"size":523,"mtime":1608526916101,"results":"18","hashOfConfig":"16"},{"size":566,"mtime":1608947588807,"results":"19","hashOfConfig":"16"},{"size":2774,"mtime":1608947563818,"results":"20","hashOfConfig":"16"},{"size":4679,"mtime":1610458496889,"results":"21","hashOfConfig":"16"},{"size":2339,"mtime":1610375890254,"results":"22","hashOfConfig":"16"},{"size":2263,"mtime":1610458496986,"results":"23","hashOfConfig":"16"},{"size":2261,"mtime":1610458496923,"results":"24","hashOfConfig":"16"},{"size":6556,"mtime":1610458496889,"results":"25","hashOfConfig":"16"},{"size":2557,"mtime":1610458496939,"results":"26","hashOfConfig":"16"},{"size":627,"mtime":1609044273919,"results":"27","hashOfConfig":"16"},{"size":1096,"mtime":1610458496970,"results":"28","hashOfConfig":"16"},{"size":2911,"mtime":1610458862709,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"hdf9ai",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\user\\practice\\metal_slime_app\\src\\index.js",[],["62","63"],"C:\\Users\\user\\practice\\metal_slime_app\\src\\App.js",[],"C:\\Users\\user\\practice\\metal_slime_app\\src\\AuthService.js",[],"C:\\Users\\user\\practice\\metal_slime_app\\src\\LoggedInRoute.js",[],"C:\\Users\\user\\practice\\metal_slime_app\\src\\pages\\SignUp.js",[],"C:\\Users\\user\\practice\\metal_slime_app\\src\\pages\\Room.js",["64","65"],"import React, { useState, useEffect, useContext,useRef } from 'react'\r\nimport firebase from '../config/Firebase'\r\n\r\nimport { AuthContext } from '../AuthService'\r\n\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport './room.css'\r\nimport profile from '../img/profile.img.jpg'\r\nimport { Button, Paper, Avatar, ImageList } from '@material-ui/core'\r\n\r\nconst Room = () => {\r\n\r\n    const [messages, setMessages] = useState(null)\r\n    const [value, setValue] = useState('')\r\n    const [image, setImage] = useState('')\r\n\r\n    const user = useContext(AuthContext)\r\n    //AuthserviceのReact.createContextからの戻り値で認証ユーザー\r\n\r\n    useEffect(() => {\r\n        firebase.firestore().collection('messages').orderBy('date')\r\n            .onSnapshot((snapshot) => {\r\n                const messages = snapshot.docs.map(doc => {\r\n                    return doc.data()\r\n                })\r\n                //　onsnapshotでmessagesコレクションのデータを取得（docsはランダムデータID） \r\n                setMessages(messages)\r\n            })\r\n        firebase.storage().ref().child(`/images/${user.uid}`).getDownloadURL().then(fireBaseUrl => {\r\n            setImage(fireBaseUrl)\r\n\r\n        })\r\n    }, [])\r\n\r\n    const scrollEndRef = useRef(null)\r\n    useEffect(() => {\r\n        const scrollArea = document.getElementById('scroll')\r\n        if (scrollArea) {\r\n            scrollArea.scrollIntoView({ behavior: \"smooth\",block:\"end\" })\r\n        }\r\n    })\r\n\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        const textNone = document.getElementById('tuika')\r\n        if (textNone.value === '')\r\n            return;\r\n        else\r\n            textNone.value = ''\r\n        firebase.firestore().collection('messages').doc()\r\n            .set({\r\n                user: user.displayName,\r\n                content: value,\r\n                image: image,\r\n                date: new Date(),\r\n                uid: user.uid //各々のユーザー情報(id)\r\n            })\r\n        setMessages([\r\n            ...messages,\r\n            {\r\n                user: user.displayName,\r\n                image: image,\r\n                content: value,\r\n                date: new Date(),\r\n                uid: user.uid\r\n            }\r\n        ])\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"title_chat\">トーク</h1>\r\n            <div className=\"goto_update\">\r\n                <Button size='small' variant='outlined' onClick={() => firebase.auth().signOut()}>ログアウト</Button>\r\n                <p><Link to=\"/update\" className=\"link_chat\">プロフィール変更</Link></p>\r\n            </div>\r\n            <div className=\"wrap_nav_chat\">\r\n                <p className=\"nav_chat\">トーク</p>\r\n                <p><Link to=\"/todo\" className=\"link_chat\">Todo</Link></p>\r\n                <p><Link to=\"/Recommended\" className=\"link_chat\">おすすめ</Link></p>\r\n                <p><Link to=\"/album\" className=\"link_chat\">卒業アルバム</Link></p>\r\n            </div>\r\n            <div className='took'>\r\n                <Paper>\r\n                    {/* ↓今のメッセージの数 */}\r\n                    <div className='room-ul' id='scroll' ref={scrollEndRef} >\r\n                        {messages\r\n                            ?\r\n                            messages.map((message, id) =>\r\n                            (<React.Fragment key={id} >\r\n                                {message.uid !== user.uid && <div className='messages-left'>\r\n                                    <Avatar>\r\n                                        <div className='icon'>\r\n                                            <img className='icon-img' src={message.image ? message.image : profile} />\r\n                                        </div>\r\n                                    </Avatar>\r\n                                    <div>\r\n                                        <p className='user-name'>{message.user}</p>\r\n                                        <p className='message-left'>{message.content}</p>\r\n                                    </div>\r\n                                </div>}\r\n                                {message.uid === user.uid && <div className='messages-right'>\r\n                                    <div>\r\n                                        <p >{message.user}</p>\r\n                                        <p className='message-right'>{message.content}</p>\r\n                                    </div>\r\n                                </div>}\r\n                            </React.Fragment>)\r\n                            ) :\r\n                            <p>...loading</p>\r\n                        }\r\n                    </div>\r\n                </Paper>\r\n                {/* ↓自分でメッセージをつくりだす */}\r\n                <form onSubmit={handleSubmit} className='took-form'>\r\n                    <div className='took-form2'>\r\n                        <input\r\n                            type='text'\r\n                            id='tuika'\r\n                            placeholder='メッセージを入力'\r\n                            onChange={e => setValue(e.target.value)}\r\n                        />\r\n                        <div type='submit' className='took-button'></div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Room","C:\\Users\\user\\practice\\metal_slime_app\\src\\pages\\Login.js",[],"C:\\Users\\user\\practice\\metal_slime_app\\src\\todo\\Todo.js",["66"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport Form from './Form'\r\nimport { Link } from 'react-router-dom'\r\nimport { AuthContext } from '../AuthService'\r\nimport './todo.css'\r\nimport firebase from '../config/Firebase'\r\n\r\n//MaaterialUI\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst Todo = () => {\r\n  const [todos, setTodos] = useState([])\r\n  const user = useContext(AuthContext)\r\n  const addTodo = contents => {\r\n    console.log(contents)\r\n    firebase.firestore().collection('todos')\r\n      .add({\r\n        state: false,\r\n        content: contents,\r\n        date: new Date(),\r\n        user:user.displayName\r\n      })\r\n  }\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n      },\r\n    },\r\n  }));\r\n\r\n  useEffect(() => {\r\n    firebase.firestore().collection('todos').where(\"user\", \"==\", user.displayName).onSnapshot((snapshot) => {\r\n        const todos = snapshot.docs.map(doc => {\r\n          return doc.data()\r\n        })\r\n        setTodos(todos)\r\n      })\r\n    var delete_todos = firebase.firestore().collection('todos').where(\"state\", \"==\", true);\r\n    delete_todos.get().then(function (querySnapshot) {\r\n      querySnapshot.forEach(function (doc) {\r\n        console.log(doc.id, \" => \", doc.data());\r\n        doc.ref.delete();\r\n      });\r\n    })\r\n  }, [])\r\n\r\n  //MaterialUI\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <h1 className=\"title_todo\">Todoリスト</h1>\r\n      <Button size=\"small\" variant=\"outlined\" onClick={() => firebase.auth().signOut()}>ログアウト</Button>\r\n      {/* <button onClick={() => firebase.auth().signOut()}>Logout</button> */}\r\n      <div className=\"wrap_todo\">\r\n        <p ><Link to=\"/Room\" className=\"link_todo\">トーク</Link></p>\r\n        <p className=\"nav_todo\">Todo</p> \r\n        <p ><Link to=\"/Recommended\" className=\"link_todo\">おすすめ</Link></p>\r\n        <p ><Link to=\"/album\" className=\"link_todo\">卒業アルバム</Link></p>\r\n      </div>\r\n      <h4 className=\"purpose\">目標：アプリを一つ作る</h4>\r\n      <Form addTodo={addTodo} />\r\n      <ul className=\"list_style\">\r\n        {todos ?\r\n          todos.map((todo, id) =>\r\n          (<li key={id}>\r\n            <input type=\"checkbox\" onChange={() => {\r\n              firebase.firestore().collection('todos').where(\"content\", \"==\", todo.content).get().then(function (querySnapshot) {\r\n                querySnapshot.forEach(function (doc) {\r\n                  doc.ref.update({state: !doc.data().state});\r\n                });\r\n              })\r\n            }}\r\n            />\r\n            <span>{todo.content}</span>\r\n          </li>)\r\n          ) :\r\n          <p>...loading</p>\r\n        }\r\n      </ul>\r\n    </>\r\n  )\r\n}\r\nexport default Todo","C:\\Users\\user\\practice\\metal_slime_app\\src\\pages\\album.js",[],"C:\\Users\\user\\practice\\metal_slime_app\\src\\pages\\Recommended.js",["67"],"import React from 'react'\r\nimport css from './style.css'\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`simple-tabpanel-${index}`}\r\n            aria-labelledby={`simple-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `simple-tab-${index}`,\r\n        'aria-controls': `simple-tabpanel-${index}`,\r\n    };\r\n}\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        // backgroundColor: theme.palette.background.paper,\r\n    },\r\n}));\r\nconst Recommended = () => {\r\n    const classes = useStyles();\r\n    const [value, setValue] = React.useState(0);\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n    return (\r\n        <div className={css}>\r\n            <h1 className=\"title_osusume\">おすすめ</h1>\r\n            \r\n            <Paper className={classes.root}>\r\n                <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\" centered>\r\n                    <Tab label=\"山口海斗\" {...a11yProps(0)} />\r\n                    <Tab label=\"鈴木孝太郎\" {...a11yProps(1)} />\r\n                    <Tab label=\"松本彪\" {...a11yProps(2)} />\r\n                </Tabs>\r\n            </Paper>\r\n            {/* <input type=\"radio\" name=\"tab_item\" id=\"tab_radio_A\" className=\"tab_radio\" defaultChecked />\r\n            <label htmlFor=\"tab_radio_A\" className=\"tab_menu\">山口海斗</label>\r\n            <input type=\"radio\" name=\"tab_item\" id=\"tab_radio_B\" className=\"tab_radio\" />\r\n            <label htmlFor=\"tab_radio_B\" className=\"tab_menu\">鈴木孝太郎</label>\r\n            <input type=\"radio\" name=\"tab_item\" id=\"tab_radio_C\" className=\"tab_radio\" />\r\n            <label htmlFor=\"tab_radio_C\" className=\"tab_menu\">松本彪</label> */}\r\n            <TabPanel value={value} index={0}>\r\n                <ul>\r\n                    <li>言語に限らず、firestoreやwordpressなど幅広移動ががある。動画も一つ一つが軽いので取り組みやすいです！</li>\r\n                    <a href=\"https://dotinstall.com/\">ドットインストール</a>\r\n                    <li>gitのコマンドについて漫画で教えてくれます。意外とわかりやすい。</li>\r\n                    <a href=\"https://www.r-staffing.co.jp/engineer/entry/20190621_1\">gitを漫画で理解</a>\r\n                </ul>\r\n      </TabPanel>\r\n            <TabPanel value={value} index={1}>\r\n                <ul>\r\n                    <li>gitコマンドの意味がまとまっていて、分からない時に役立ちます！</li>\r\n                    <a href=\"https://kitsune.blog/git-command\">gitコマンドの使い方 まとめ集</a>\r\n                    <li>VS codeのショートカットキーで作業効率が上がるので便利です！</li>\r\n                    <div id=\"iframe-parent\">\r\n                        <iframe width=\"1280\" height=\"720\" src=\"https://www.youtube.com/embed/cNyvefTJOcM\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>【完全保存版】VS Code ショートカット</iframe>\r\n                    </div>\r\n                </ul>\r\n      </TabPanel>\r\n            <TabPanel value={value} index={2}>\r\n                <ul>\r\n                    <li>初心者でもわかりやすいコードの基本的な書き方が学べます。</li>\r\n                    <a href=\"https://prog-8.com/\">Progate</a>\r\n                    <li>gitがわからなくなったときにこれを見れば大体解決できます。</li>\r\n                    <a href=\"https://backlog.com/ja/git-tutorial/\">サル先生のGit入門</a>\r\n                </ul>\r\n      </TabPanel>\r\n            {/* <div id=\"tab_contains_A\" className=\"tab_contains\">\r\n                <ul>\r\n                    <li>言語に限らず、firestoreやwordpressなど幅広移動ががある。動画も一つ一つが軽いので取り組みやすいです！</li>\r\n                    <a href=\"https://dotinstall.com/\">ドットインストール</a>\r\n                    <li>gitのコマンドについて漫画で教えてくれます。意外とわかりやすい。</li>\r\n                    <a href=\"https://www.r-staffing.co.jp/engineer/entry/20190621_1\">gitを漫画で理解</a>\r\n                </ul>\r\n            </div>\r\n            <div id=\"tab_contains_B\" className=\"tab_contains\">\r\n               <ul>\r\n                   <li>gitコマンドの意味がまとまっていて、分からない時に役立ちます！</li>\r\n                   <a href=\"https://kitsune.blog/git-command\">gitコマンドの使い方 まとめ集</a>\r\n                   <li>VS codeのショートカットキーで作業効率が上がるので便利です！</li>\r\n                   <div id=\"iframe-parent\">\r\n                   <iframe width=\"1280\" height=\"720\" src=\"https://www.youtube.com/embed/cNyvefTJOcM\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>【完全保存版】VS Code ショートカット</iframe>\r\n                   </div>\r\n               </ul>\r\n            </div>\r\n            <div id=\"tab_contains_C\" className=\"tab_contains\">\r\n                <ul>\r\n                    <li>初心者でもわかりやすいコードの基本的な書き方が学べます。</li>\r\n                    <a href=\"https://prog-8.com/\">Progate</a>\r\n                    <li>gitがわからなくなったときにこれを見れば大体解決できます。</li>\r\n                    <a href=\"https://backlog.com/ja/git-tutorial/\">サル先生のGit入門</a>\r\n                </ul>\r\n            </div> */}\r\n        </div>\r\n    )\r\n}\r\nexport default Recommended","C:\\Users\\user\\practice\\metal_slime_app\\src\\profile\\UpDate.js",[],"C:\\Users\\user\\practice\\metal_slime_app\\src\\config\\Firebase.js",[],"C:\\Users\\user\\practice\\metal_slime_app\\src\\todo\\Form.js",[],"C:\\Users\\user\\practice\\metal_slime_app\\src\\Menu\\menu.js",["68"],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":32,"column":8,"nodeType":"75","endLine":32,"endColumn":10,"suggestions":"76"},{"ruleId":"77","severity":1,"message":"78","line":86,"column":45,"nodeType":"79","endLine":86,"endColumn":119},{"ruleId":"80","severity":1,"message":"81","line":52,"column":9,"nodeType":"82","messageId":"83","endLine":52,"endColumn":16},{"ruleId":"84","severity":1,"message":"85","line":82,"column":25,"nodeType":"79","endLine":82,"endColumn":236},{"ruleId":"86","severity":1,"message":"87","line":31,"column":17,"nodeType":"88","messageId":"89","endLine":31,"endColumn":30},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user.uid'. Either include it or remove the dependency array.","ArrayExpression",["92"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'classes' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","no-self-compare","Comparing to itself is potentially pointless.","BinaryExpression","comparingToSelf","no-global-assign","no-unsafe-negation",{"desc":"93","fix":"94"},"Update the dependencies array to be: [user.uid]",{"range":"95","text":"96"},[1083,1085],"[user.uid]"]